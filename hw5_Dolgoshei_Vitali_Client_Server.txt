Client_Server
1) Прочиать про клиент-серверную архитектуру

2) Что ткое HTTP и HTTPS
HTTP - протокол передачи данных (прикладного уровня), используется в клиент-серверной архмтектуре для пеердачи информации в виде текста, 
изначально придуман для передачи документов с гиперссылками, теперь используется шире. стандарт порт 80
Состоит из:
- Строки запроса, в которой указывается метод передачи, URL-адрес, к которому нужно обратиться и версию протокола HTTP.
    Для запроса это HTTP-метод, путь, и версия протокола. 
    Для ответа – статус: версия протокола, код ответа, и опциональное пояснение. 
    Значения следуют именно в таком порядке, и разделяются пробелами
- Заголовков (хедеры), которые описывают тело сообщения, передают различные параметры и др. сведения и информацию.
- Тело сообщения (body). 

HTTPS тоже только с шифрованием. Протоколы шифрования  SSL(secure sockets layer), TLS 2.0 (Transport Layer Security) порт 443
TLS создан на основе SSL

3) HTTP методы

GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные. (макс длина строки 2048)
POST для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере. 
PUT заменят все текущие представления ресурса данными запроса.
DELETE удаляет указанный ресурс

PATCH используется для частичного изменения ресурса
HEAD апрашивает ресурс так же, как и метод GET, но без тела ответа.
CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.
OPTIONS используется для описания параметров соединения с ресурсом.

формат вызова 
POST /login-check.php HTTP/1.1

метод <URI> HTTP/version 
header : значение
header : значение

Connection: Keep-Alive
Content-Encoding: gzip
Content-Type: text/html; charset=utf-8
Date: Mon, 18 Jul 2016 16:06:00 GMT
Etag: "c561c68d0ba92bbeb8b0f612a9199f722e3a621a"
Keep-Alive: timeout=5, max=997
Last-Modified: Mon, 18 Jul 2016 02:36:04 GMT
Server: Apache
User-Agent: 
Set-Cookie: mykey=myvalue; expires=Mon, 17-Jul-2017 16:06:00 GMT; Max-

<URI> Uniform Resource Identifier  это идентификатор ресурса
HTTP/version версия HTTP, 

различия междy GET и POST

Some notes on POST requests:
POST requests are never cached
POST requests do not remain in the browser history
POST requests cannot be bookmarked
POST requests have no restrictions on data length

4) HTTP статус коды сервера

5 групп 1хх, 2хх, 3хх, 4хх, 5хх

1xx - информационные
100 - продолжай
103 - идет обработка

2xx - положительные, позитивные
200 - ОК все хорошо
201 Created HTTP/1.0
202 Accepted HTTP/1.0
204 No Content HTTP/1.0

3xx - о перенаправлении 
301 - перемещено навсегда
302 - перемещено временно

4xx - ошибка на стороне клиента
400 Bad Request HTTP/1.0 «Неверный запрос» – запрос не может быть понят сервером из-за некорректного синтаксиса.
401 Unauthorized HTTP/1.1 «Неавторизованный запрос» – для доступа необходимо ввести логин и пароль.
402 Payment Required HTTP/1.1 «Необходима оплата за запрос» – в настоящий момент не используется. Этот код предусмотрен для платных пользовательских сервисов.
403 Forbidden HTTP/1.0 «Доступ к ресурсу запрещен» – сервер понял запрос, но он отказывается его выполнять из-за ограничений в доступе.
404 Not Found HTTP/1.0 «Ресурс не найден» – документ не существует.
405 Method Not Allowed HTTP/1.1 «Недопустимый метод» – указанный клиентом метод нельзя применить к текущему ресурсу. В ответе сервер должен указать доступные методы в заголовке Allow, разделив их запятой.

5xx - ошибка на стороне сервера
500 - внутренняя ошибка сервера
501 - не реализовано
502 - плохой шлюз (bad gateway)
503 - сервис недоступен
505 - версия HTTP не поддерживается

5) Что такое ядро браузера 

Браузер состоит из оболочки и ядра. Браузеров много, а движков, на которых они работают мало.
Ядро (движок) браузера - это программа (интерпритатор) позволяющая отображать на экране (рендерить) html, css, xml, images и др. файлы в "удобном для человека виде"
и исполнять JS код.

6) Какие браузеры какиие ядра используют

Blink - Chrome, Chromium, Edge (ранее - EDGE Html), Opera (ранее - Presto)
Gecko - Mozilla
WebKit - Apple Safari, MacOS, Chrome (до 2013)
Tident - IExplorer


7) Что такое API

API - application programming interface. 
Интерфейс который позволяет "программам общаться" друг с другом, по заранее определнным правилам.
В частном случае это контракт, который предостваляет программа, обязуясь делать определенные действия по определенным поступающим запросам


8). Что такое ендпоинты

Эндпоинт выполняют конкретную задачу, принимают параметры и возвращают данные

Точка приема (входа, касания) api-сервиса(запроса),
в зависимости от трактовки может быть весь URL/URI или его часть после доменного имени/ или IP адреса


9) URL (URI, URL, URN)

URI - это абстракция концепции идентификации,
а URL и URN - это конкретные реализации - полного адреса ресурса и уникального контекстного имени соответственно.

Uniform Resource Identifier
URI = URL или URI = URN или URI = URL + URN
это строка символов, которая используется для идентификаци ресурса по его адресу или по его имени, или по тому и другому

Uniform Resource Locator 
https://www.mysite.com:80/catalog/product?id=15&color=gray#price
                          не обязательная часть

URL определяет местонахождение ресурса в сети и способ его (ресурса) извлечения
это строка символов, которая используется для идентификаци ресурса только по его адресу

Uniform Resource Name
urn:issn:13543513435
схема:пространство имен:уникальный идентификатор ресурса

Неизменяемая последовательность символов определяющая только имя некоторого ресурса. Смысл URN в том, что им единоразово и уникально именуется какая-либо сущность в рамках конкретного пространства имен (контекста), либо без пространства имен, в общем (что не желательно).
это строка символов, которая используется для идентификаци ресурса только по его имени


10) Идемпотентные HTTP методы

Второй и последующий результаты запроса идентичны, имеют один и тот же эффект, не изменяющий состояние сервера, даже если код ответа сервера разный
Иначе говоря, идемпотентный метод не должен иметь никаких побочных эффектов (side-effects) кроме сбора статистики.
Корректно реализованные методы GET, PUT и DELETE идемпотентны, 
но не метод POST. 


11) Безопасные HTTP методы

Метод, который не производит измененения на сервере. Не изменяет состояние сервера.
Get, HEAD
все безопасные методы являются идемпотентными.


12) Иденфикация, Аутентификация, Авторизация

Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
Процедура предстваления в системе. Введедние логина, который однозначно идентифицирует пользователя в системе.

Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных.
Проверка соответствия идентификатора паролю. Подтверждение личности пользователя. Рекомендуется двухфакторная. 

Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных действий.
Выдача определенных прав пользователю на выполнение действий в системе.


13) Что такое IP

IP-адрес – это уникальный адрес, идентифицирующий устройство(узел) в интернете или локальной сети.
IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.


14) Что такое октаты в DNS
   DNS — Domain Name Service, DNS сервер это 1 или группа серверов, которая хранит таблицу соответствия доменных имен - IP адресам. чтобы вводить в адресной строке www.google.com а не 216.58.209.14
   IP адрес состоит из 4 октат(байт), разделенных точкой, каждая из которых принимает значение от 0 до 255, 
   адрес делится на номер сети и номер узла.  
   маска сети помогает разделеить адрес на: адрес подсети и адрес узла.


15) Что такое порт, сколько портов у Linux сервера

  целое неотрицательное число, записываемое в заголовках протоколов транспортного уровня сетевой модели OSI (TCP, UDP, SCTP, DCCP).
  на уровне коммуникации между двумя узлами с IP адресами для одновременной работы нескольких прогпрамм, сервисов, служб система выделяет(либо не выделяет если занят) определенные порты для разных программ.
  Номера портов могут указываться в адресах веб-сайтов (URL) или в идентификаторах других ресурсов, доступных в компьютерных сетях (URI). По умолчанию в протоколе HTTP используется порт 80, а в протоколе HTTPS — порт 443.

   
  номер порта от 1 до 65 535, для каждого сетевого интерфейса и протокола (TCP, UDP, )
  Ответ на вопрос сколько портов у Linux сервера зависит от кол-ва интерфейсов, 
  и протоколов?


16) Уровни OSI

Open system interconection model
(данные -> в биты - это инкапсуляция) 
(биты -> в данные - это декапсуляция)

7 - прикладной           уровень приложений (application layer). Это то, с чем взаимодействуют пользователи, своего рода графический интерфейс всей модели OSI. 
                         Задача седьмого уровня — использовать свои протоколы, чтобы пользователь увидел данные в понятном ему виде. 
                         Протоколы здесь используют UDP (например, DHCP) или TCP (например, HTTP, HTTPS, SFTP (Simple FTP), DNS).

6 - представления        оперирует чистыми данными. Представляет данные (которые все еще являются PDU) в понятном человеку и машине виде. Перевод текста из одной кодировки в другую. Представление картинок (в JPEG, GIF и т.д.), 
                         а также видео-аудио (в MPEG, QuickTime). Шифрование данных, когда при передаче их необходимо защитить.

5 - сеансовый            оперирует чистыми данными. Сеансовый уровень отвечает за поддержку сеанса или сессии связи.

4 - транспортный         передача пакетов. TCP/UDP, при передаче данных, чувствительных к потерям используется протокол TCP, контролирующий целостность доставленной информации. 
                         Для мультимедийных файлов небольшие потери не так важны, гораздо критичнее будет задержка. Для передачи таких данных, используется протокол UDP, позволяющий организовать связь без установки соединения.

3 - сетевой              Маршрутизаторы, получают MAC-адрес от коммутаторов, строят маршрут от одного устройства к другому. протокол ARP (Address Resolution Protocol — протокол определения адреса. 
                         С помощью него 64-битные MAC-адреса преобразуются в 32-битные IP-адреса и наоборот, тем самым обеспечивается инкапсуляция и декапсуляция данных.

2 - канальный            биты -> во фреймы с адресами, коммутаторы, их задача — передать сформированные кадры от одного устройства к другому, используя в качестве адресов только физические MAC-адреса.  

1 - физический уровень   биты  (PDU - Protocol Data Unit), провода, WiFi, 3/4/5G

OSI модель сетевого взаимодействия систем по протокодам транспортного уровня.


17) Хедеры http запросов

ЗАПРОС 
GET /tutorials/other/top-20-mysql-best-practices/ HTTP/1.1
Host: net.tutsplus.com
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Connection: keep-alive
Cookie: PHPSESSID=r2t5uvjq435r4q7ib3vtdjq120
Pragma: no-cache
Cache-Control: no-cache

ОТВЕТ
HTTP/1.x 200 OK
Transfer-Encoding: chunked
Date: Sat, 28 Nov 2009 04:36:25 GMT
Server: LiteSpeed
Connection: close
X-Powered-By: W3 Total Cache/0.8
Pragma: public
Expires: Sat, 28 Nov 2009 05:36:25 GMT
Etag: "pub1259380237;gz"
Cache-Control: max-age=3600, public
Content-Type: text/html; charset=UTF-8
Last-Modified: Sat, 28 Nov 2009 03:50:37 GMT
X-Pingback: https://net.tutsplus.com/xmlrpc.php
Content-Encoding: gzip
Vary: Accept-Encoding, Cookie, User-Agent
 
